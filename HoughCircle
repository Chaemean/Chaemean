#include <opencv2\opencv.hpp>
#include<iostream>
#include <cmath>

using namespace cv;
using namespace std;



//칼라->명암영상 함수 (이미지)
Mat Gray(Mat img)
{
    int w = img.cols;
    int h = img.rows;

    Mat sub(h, w, CV_8UC1);

    //명암영상 변환공식을 사용하여 그레이로 변환, +0.5는 반올림을 위해 해줌
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            Vec3b pixel = img.at<Vec3b>(i, j);
            sub.at<uchar>(i, j) = (int)(0.114 * pixel[0] + 0.587 * pixel[1] + 0.299 * pixel[2] + 0.5);
        }
    }

    return sub;
}

//크기, 각도 계산 함수
void cartToPolar(const Mat& grad_x, const Mat& grad_y, Mat& magnitude, Mat& angle, bool angleInDegrees = true) {
    magnitude = Mat(grad_x.size(), CV_32F); //사진과 동일한 크기의 이미지 생성
    angle = Mat(grad_x.size(), CV_32F);

    for (int y = 0; y < grad_x.rows; y++) {
        for (int x = 0; x < grad_x.cols; x++) {
            float gx = float(grad_x.at<double>(y, x));
            float gy = float(grad_y.at<double>(y, x));

            magnitude.at<float>(y, x) = std::sqrt(gx * gx + gy * gy); //에지 강도 계산, magnitude에 대입
            float ang = std::atan2(gy, gx); //그레이디언트 각 계산
            if (angleInDegrees) {  //단위 라디안->도(degree)
                ang = ang * (180 / CV_PI);
            }
            angle.at<float>(y, x) = ang; //angle에 대입
        }
    }
}

Mat Find_center(Mat grad_x, Mat grad_y, Mat threshold_img) {
    int rows = grad_x.rows;
    int cols = grad_x.cols;

    Mat magnitude, angle;
    cartToPolar(grad_x, grad_y, magnitude, angle, true); //함수를 이용해 크기와 각 계산

    Mat vote = Mat::zeros(grad_x.size(), CV_32SC1); //투표할 배열 생성

    int min = 255;
    int max = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (threshold_img.at<uchar>(i, j) > 0) { //임계값 이상인 에지로 한정
                double inclination = tan(angle.at<float>(i, j) * (CV_PI / 180)); //기울기
                double intercept = i - inclination * j; // y 절편

                for (int x = 0; x < cols; x++) { //직선 그리기
                    int y = int(inclination * x + intercept);
                    if (y >= 0 && y < rows) {
                        vote.at<int>(y, x) += 1;

                        //정규화에 쓰일 최대, 최소값 찾기
                        if (vote.at<int>(y, x) < min)
                            min = vote.at<int>(y, x);
                        if (vote.at<int>(y, x) > max)
                            max = vote.at<int>(y, x);
                    }
                }
            }
        }
    }

    //정규화
    if (max - min == 0) {
        // 모든 값이 같은 경우(분모가 0인 경우) 처리
        vote = Scalar(0);
    }
    else {
        for (int i = 0; i < vote.rows; i++) {
            for (int j = 0; j < vote.cols; j++) {
                vote.at<int>(i, j) = static_cast<int>(255.0 * (vote.at<int>(i, j) - min) / (max - min));
            }
        }
    }

    Mat voteNormalized;
    vote.convertTo(voteNormalized, CV_8UC1); // 타입 변환
    imshow("vote", voteNormalized);
    imwrite("허프변환_투표.png", voteNormalized);

    return voteNormalized;
}

Mat NMS(Mat vote, int threshold)
{
    Mat nms = vote.clone(); //비최대 억제 결과를 저장할 배열 생성

    for (int i = 0; i < vote.rows; i++) {
        for (int j = 0; j < vote.cols; j++) {
            for (int dy = -9; dy <= 9; dy++) { //중심이 여러개 검출되는것을 방지하기 위해 비교하는 주변 범위를 키워준다.
                for (int dx = -9; dx <= 9; dx++) {
                    int ny = i + dy;
                    int nx = j + dx;

                    if (ny >= 0 && ny < vote.rows && nx >= 0 && nx < vote.cols) { //배열 범위 밖 연산 방지
                        if (vote.at<uchar>(i, j) < vote.at<uchar>(ny, nx))
                            nms.at<uchar>(i, j) = 0;
                    }
                }
            }

            if (nms.at<uchar>(i, j) < threshold)
                nms.at<uchar>(i, j) = 0;
        }
    }

    return nms;

}

// 원 찾기 함수
Mat FindCircle(Mat center, Mat edge, Mat img, int maxRadius, int threshold) { //(중심, 에지, 원본이미지, 최대 반지름 값, 임계값)
    for (int i = 0; i < center.rows; i++) {
        for (int j = 0; j < center.cols; j++) {
            if (center.at<uchar>(i, j) > 0) { // 중심인지 먼저 검사
                int bestRadius = 0;
                int maxVotes = 0;

                for (int radius = 5; radius <= maxRadius; radius++) {
                    int votes = 0;

                    // 원주 위의 점들에 대해 반복
                    for (int angle = 0; angle < 360; angle++) {
                        int x = j + radius * cos(angle * CV_PI / 180.0); //원의 매개변수 방정식
                        int y = i + radius * sin(angle * CV_PI / 180.0);

                        //원주가 에지를 몇개 포함하는지 투표
                        if (x >= 0 && x < edge.cols && y >= 0 && y < edge.rows) { //x,y가 범위 안에 있을때만 계산
                            if (edge.at<uchar>(y, x) > 0) {
                                votes++;
                            }
                        }
                    }
                    // 최대 투표 수 업데이트
                    if (votes > maxVotes) {
                        maxVotes = votes;
                        bestRadius = radius;
                    }
                }
                // 최적의 원 그리기
                if (maxVotes > threshold) {
                    circle(img, Point(j, i), bestRadius, Scalar(255), 2);
                }
            }
        }
    }
    return img;
}

int main() {
    // 이미지를 그레이스케일로 불러오기
    Mat img = imread("smarties.png");
    if (img.empty()) {
        cout << "이미지를 불러오는데 실패했습니다." << endl;
        return -1;
    }
    imshow("원본 이미지", img);
    

    Mat gray_img = Gray(img);

    Mat sobelX, sobelY;
    Mat absSobelX, absSobelY;

    // 소벨 연산자 - X 방향
    Sobel(gray_img, sobelX, CV_64F, 1, 0);
    convertScaleAbs(sobelX, absSobelX);

    // 소벨 연산자 - Y 방향
    Sobel(gray_img, sobelY, CV_64F, 0, 1);
    convertScaleAbs(sobelY, absSobelY);

    // 소벨영상 (X와 Y 방향의 결합)
    Mat result;
    addWeighted(absSobelX, 0.5, absSobelY, 0.5, 0, result);


    Mat threshold_img = result.clone();

    int threshold = 50; //에지 임계값

    for (int i = 0; i < img.rows; i++) {
        for (int j = 0; j < img.cols; j++) {
            if (result.at<uchar>(i, j) < threshold) {
                threshold_img.at<uchar>(i, j) = 0;
            }
        }
    }
    imshow("Sobel - Combined", result);
    imwrite("Sobel.png", result);
    
    imshow("Sobel - threshold", threshold_img);
    imwrite("Sobel_threshold.png", threshold_img);

    Mat vote = Find_center(sobelX, sobelY, threshold_img);

    Mat nms_img = NMS(vote, 150); // 임계값을 조정하여 실험
    imshow("NMS", nms_img);
    imwrite("NMS.png", nms_img);

    Mat circle_img = FindCircle(nms_img, threshold_img, img, 200, 200); //인수:(중심점, 에지, 그릴 이미지, 최대 반지름, 검출 에지 임계값)
    imshow("circle_img", circle_img);
    imwrite("Circle.png", circle_img);

    waitKey(0);
    return 0;

}
