#include <opencv2\opencv.hpp>
#include<iostream>
#include <cmath>

using namespace cv;
using namespace std;

// 절댓값 반환
double Absol(double x)
{
	if (x >= 0)
		return x;
	else
		return -x;
}

//칼라->명암영상 함수 (이미지)
Mat Gray(Mat img)
{
	int w = img.cols;
	int h = img.rows;

	Mat sub(h, w, CV_8UC1);

	//명암영상 변환공식을 사용하여 그레이로 변환, +0.5는 반올림을 위해 해줌
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			Vec3b pixel = img.at<Vec3b>(i, j);
			sub.at<uchar>(i, j) = (int)(0.114 * pixel[0] + 0.587 * pixel[1] + 0.299 * pixel[2] + 0.5);
		}
	}

	return sub;
}

//명암영상 가우시안 커널 구하기
Mat GaussianFilter(Mat img, int x) //이미지, 필터의 크기
{
	double sigma = (double)x / 6;
	double pi = 3.141592;
	double e = 2.718;
	double p = 1 / (sigma * sigma * 2 * pi);

	Mat gaussian_filter(x, x, CV_64F);//소숫점을 저장하기 위해 데이터형을 CV_64F로 해준다

	for (int i = 0; i < x; i++)
	{
		for (int j = 0; j < x; j++) {
			double power = (double)((i - x / 2) * (i - x / 2) + (j - x / 2) * (j - x / 2)) / (2 * sigma * sigma); //e의 지수 계산
			gaussian_filter.at<double>(i, j) = p * pow(e, -power);  //필터 값 넣어줌
		}
	}

	return gaussian_filter;
}

//컨볼루션 해주는 함수 (이미지, 커널)
Mat Convolution(Mat img, Mat kernel) {
	int kernelRows = kernel.rows;
	int kernelCols = kernel.cols;

	int imageRows = img.rows;
	int imageCols = img.cols;

	int paddingX = kernelCols / 2; // 가장자리 적용 안되는 부분 계산
	int paddingY = kernelRows / 2;

	//가장자리를 적용하기위해 가장자리를 0으로 채우는 0덧대기를 해준다
	Mat sub = Mat::zeros(imageRows + 2 * paddingY, imageCols + 2 * paddingX, CV_8UC1); //0으로 초기화
	Mat convol_img(imageRows, imageCols, CV_8UC1); //반환할 이미지

	for (int i = paddingY; i < imageRows + paddingY; i++) { //sub에 원래 이미지 화솟값 채워줌, 가장자리 부분에 채우지 않도록 주의
		for (int j = paddingX; j < imageCols + paddingX; j++) {
			sub.at<uchar>(i, j) = img.at<uchar>(i - paddingY, j - paddingX);
		}
	}

	// 가장자리(필터 적용이 안되는 부분)를 제외한 부분 컨볼루션
	for (int i = paddingY; i < imageRows + paddingY; i++) {
		for (int j = paddingX; j < imageCols + paddingX; j++) {
			double sum = 0.0; // 중심화소 값 = sum

			// 커널과 픽셀값 연산해서 중심화소 값 계산
			for (int ky = 0; ky < kernelRows; ky++) {
				for (int kx = 0; kx < kernelCols; kx++) {
					double pixelValue = (double)sub.at<uchar>(i + ky - paddingY, j + kx - paddingX); //확장된 sub를 이용하여 중심화소를 기준으로 주변 값을 읽어온다.
					double kernelValue = kernel.at<double>(ky, kx); // 커널 값을 읽어온다
					sum += pixelValue * kernelValue; // 주변화소값과 커널값을 곱한 값을 모두 더해준다.
				}
			}

			convol_img.at<uchar>(i - paddingY, j - paddingX) = saturate_cast<uchar>(Absol(sum)); // 반환할 이미지에 계산된 값을 넣어준다
		}
	}

	return convol_img;
}

//크기, 각도 계산 함수
void cartToPolar(const Mat& grad_x, const Mat& grad_y, Mat& magnitude, Mat& angle, bool angleInDegrees = true) {
	magnitude = Mat(grad_x.size(), CV_32F); //사진과 동일한 크기의 이미지 생성
	angle = Mat(grad_x.size(), CV_32F);

	for (int y = 0; y < grad_x.rows; y++) {
		for (int x = 0; x < grad_x.cols; x++) {
			float gx = grad_x.at<float>(y, x);
			float gy = grad_y.at<float>(y, x);

			magnitude.at<float>(y, x) = std::sqrt(gx * gx + gy * gy); //에지 강도 계산, magnitude에 대입
			float ang = std::atan2(gy, gx); //그레이디언트 각 계산
			if (angleInDegrees) {  //단위 라디안->도(degree)
				ang = ang * (180 / CV_PI);
			}
			angle.at<float>(y, x) = ang; //angle에 대입
		}
	}
}

//NMS
Mat nonMaxSuppression(const Mat& grad_x, const Mat& grad_y) {
	Mat grad_x_float, grad_y_float;
	grad_x.convertTo(grad_x_float, CV_32F); //음수를 포함하거나 실수일 수 있으므로 32F로 설정
	grad_y.convertTo(grad_y_float, CV_32F);

	Mat magnitude, angle;
	cartToPolar(grad_x_float, grad_y_float, magnitude, angle, true); //함수를 이용해 크기와 각 계산

	Mat suppressed = Mat::zeros(magnitude.size(), CV_8UC1); // 결과 이미지 초기화

	for (int y = 1; y < magnitude.rows - 1; ++y) {
		for (int x = 1; x < magnitude.cols - 1; ++x) {
			float angleDeg = angle.at<float>(y, x);
			angleDeg = angleDeg < 0 ? angleDeg + 360 : angleDeg; //각도가 음수일 경우 보정

			float q = 255, r = 255;

			if ((angleDeg >= 0 && angleDeg < 22.5) || (angleDeg >= 157.5 && angleDeg < 202.5) || (angleDeg >= 337.5 && angleDeg <= 360)) { //좌우
				q = magnitude.at<float>(y, x + 1);
				r = magnitude.at<float>(y, x - 1);
			}
			else if ((angleDeg >= 22.5 && angleDeg < 67.5) || (angleDeg >= 202.5 && angleDeg < 247.5)) { //45도 각도
				q = magnitude.at<float>(y + 1, x - 1);
				r = magnitude.at<float>(y - 1, x + 1);
			}
			else if ((angleDeg >= 67.5 && angleDeg < 112.5) || (angleDeg >= 247.5 && angleDeg < 292.5)) { //상하
				q = magnitude.at<float>(y + 1, x);
				r = magnitude.at<float>(y - 1, x);
			}
			else if ((angleDeg >= 112.5 && angleDeg < 157.5) || (angleDeg >= 292.5 && angleDeg < 337.5)) { //-45도 각도
				q = magnitude.at<float>(y - 1, x - 1);
				r = magnitude.at<float>(y + 1, x + 1);
			}

			if (magnitude.at<float>(y, x) >= q && magnitude.at<float>(y, x) >= r) { //에지 방향에 수직인 두 화소와 비교
				suppressed.at<uchar>(y, x) = saturate_cast<uchar>(magnitude.at<float>(y, x)); //주변보다 클 경우 남김
			}
			else {
				suppressed.at<uchar>(y, x) = 0; //그렇지 않은 경우 억제
			}

			if ((1 <= x && x < 8) && (1 <= y && y < 8)) {
				cout << magnitude.at<float>(y, x) << " |";
			}
		}
		cout << endl;
	}

	return suppressed;
}

//이중 임계
Mat applyDoubleThreshold(Mat& non_max_suppressed, double lowThreshold, double highThreshold) {
	Mat strongEdges = Mat::zeros(non_max_suppressed.size(), CV_8U);
	Mat weakEdges = Mat::zeros(non_max_suppressed.size(), CV_8U);
	Mat test = Mat::zeros(non_max_suppressed.size(), CV_8U);

	// 강한 엣지와 약한 엣지 구별
	for (int y = 0; y < non_max_suppressed.rows; ++y) {
		for (int x = 0; x < non_max_suppressed.cols; ++x) {
			float value = non_max_suppressed.at<uchar>(y, x);

			if (value >= highThreshold) {
				strongEdges.at<uchar>(y, x) = 255;
				test.at<uchar>(y, x) = 255;  //high임계값보다 큰 경우 남김
				imshow("strong", strongEdges);
			}
			else if (value >= lowThreshold) {  // low =< value =< high 인경우 밑에서 다시 판단
				weakEdges.at<uchar>(y, x) = 255;
				imshow("weak", weakEdges);
			}
		}
	}


	// 약한 엣지 중 강한 엣지와 연결된 픽셀 찾기
	for (int y = 0; y < weakEdges.rows; ++y) {
		for (int x = 0; x < weakEdges.cols; ++x) {
			int sum = 0;
			if (weakEdges.at<uchar>(y, x)) {
				for (int dy = -2; dy <= 2; ++dy) { //주변 화소들 중에 강한에지가 있는지 판단, 성능을 위해 주변8개가 아닌 24개를 확인
					for (int dx = -2; dx <= 2; ++dx) {
						int ny = y + dy;
						int nx = x + dx;
						if (ny >= 0 && ny < weakEdges.rows && nx >= 0 && nx < weakEdges.cols) {
							if (strongEdges.at<uchar>(ny, nx) != 0) { //주변에 강한에지가 있는경우 sum++
								++sum;
							}
							else if (test.at<uchar>(ny, nx) != 0) //주변에 강한에지와 연결된 에지가 있는 경우
								++sum;
						}
					}
				}
			}
			if (sum != 0) { //주변에 강한에지가 하나라도 있다면 255 대입
				test.at<uchar>(y, x) = 255;
			}

		}
	}

	// 최종 결과 업데이트
	for (int y = 0; y < non_max_suppressed.rows; ++y) {
		for (int x = 0; x < non_max_suppressed.cols; ++x) {
			if (test.at<uchar>(y, x) != 255) { //주변에 강한에지가 없는경우 전부 0대입
				test.at<uchar>(y, x) = 0;
			}
		}
	}

	return test;
}

//소벨 영상 합치기
Mat CombineSobel(Mat sobelX, Mat sobelY) {
	int rows = sobelY.rows;
	int cols = sobelX.cols;

	Mat combinedSobel = Mat::zeros(rows, cols, CV_8UC1);

	for (int i = 0; i < rows; i++) {
		for (int j = 0; j < cols; j++) {
			// x방향과 y방향 에지 강도를 제곱하여 더함
			double gx = sobelX.at<uchar>(i, j);
			double gy = sobelY.at<uchar>(i, j);
			double magnitude = sqrt(gx * gx + gy * gy);

			// 최종 에지 강도를 이미지에 저장
			combinedSobel.at<uchar>(i, j) = saturate_cast<uchar>(magnitude);
		}
	}

	return combinedSobel;
}

//캐니에지 영상을 받아서 극좌표 그림그리는 함수
Mat Draw_polar(Mat canny) {
    int rows = canny.rows;
    int cols = canny.cols;
    int diag = sqrt(rows * rows + cols * cols);// 최대 로우값
    Mat vote = Mat::zeros(Size(180, diag), CV_32SC1); //투표할 배열 생성

    int min = 255;
    int max = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (canny.at<uchar>(i, j) > 0) {
                for (int theta = 0; theta < 180; theta++) {
                    double rad = theta * CV_PI / 180; //삼각함수는 라디안으로 각을 받기때문에 라디안 계산
                    double rho = j * cos(rad) + i * sin(rad) ; // rho 값 계산
                    if (rho >= 0 && rho < vote.rows) { // 인덱스 범위 검사
                        vote.at<int>(int(rho), theta) += 1; // 그래프가 지나간 자리에 +1

                        //정규화에 쓰일 최대, 최소값 찾기
                        if (vote.at<int>(int(rho), theta ) < min)
                            min = vote.at<int>(int(rho), theta );
                        if (vote.at<int>(int(rho), theta ) > max)
                            max = vote.at<int>(int(rho), theta );
                    }
                }
            }
        }
    }

    //정규화
    if (max - min == 0) {
        // 모든 값이 같은 경우(분모가 0인 경우) 처리
        vote = Scalar(0);
    }
    else {
        for (int i = 0; i < vote.rows; i++) {
            for (int j = 0; j < vote.cols; j++) {
                vote.at<int>(i, j) = static_cast<int>(255.0 * (vote.at<int>(i, j) - min) / (max - min));
            }
        }
    }
    Mat voteNormalized;
    vote.convertTo(voteNormalized, CV_8UC1); // 타입 변환
    imshow("vote", voteNormalized);
   //imwrite("허프변환_투표.png", voteNormalized);

    return voteNormalized;
}

Mat NMS(Mat vote, int threshold)
{
    Mat nms = vote.clone(); //비최대 억제 결과를 저장할 배열 생성

    for (int i = 0; i < vote.rows; i++) {
        for (int j = 0; j < vote.cols; j++) {
            for (int dy = -3; dy <= 3; dy++) {
                for (int dx = -3; dx <= 3; dx++) {
                    int ny = i + dy;
                    int nx = j + dx;

                    if (ny >= 0 && ny < vote.rows && nx >= 0 && nx < vote.cols) { //배열 범위 밖 연산 방지
                        if (vote.at<uchar>(i, j) < vote.at<uchar>(ny, nx))
                            nms.at<uchar>(i, j) = 0;
                    }
                }
            }

            if (nms.at<uchar>(i, j)<threshold)
                 nms.at<uchar>(i, j) = 0;
        }
    }

    return nms;

}

void DrawLines(Mat& img, Mat nms) {
    // nms 이미지의 크기를 기반으로 화면에 그릴 수 있는 직선의 파라미터를 계산합니다.
    for (int r = 0; r < nms.rows; r++) {
        for (int th = 0; th < nms.cols; th++) {
            // 투표 수가 임계값 이상인 경우에만 직선을 그립니다.
            if (nms.at<uchar>(r, th) > 0) {
                // rho와 theta를 계산합니다.
                double rho = r;
                double theta = th * CV_PI / 180.0;

                Point pt1, pt2;
                double a = cos(theta), b = sin(theta);
                double x0 = a * rho, y0 = b * rho;

                // 직선의 시작점과 끝점을 계산합니다.
                pt1.x = cvRound(x0 + 1000 * (-b));
                pt1.y = cvRound(y0 + 1000 * (a));
                pt2.x = cvRound(x0 - 1000 * (-b));
                pt2.y = cvRound(y0 - 1000 * (a));

                // 이미지에 직선을 그립니다.
                line(img, pt1, pt2, Scalar(0, 0, 255), 2, LINE_AA);
            }
        }
    }
}


int main() {
    Mat img = imread("sudoku.png");
    if (img.empty()) {
        cout << "Error: Image not found" << endl;
        return -1;
    }

    Mat canny_img;
    Canny(img, canny_img, 30, 90, 3, 0);
    imshow("canny", canny_img);

    Mat vote_img = Draw_polar(canny_img);
    Mat nms_img = NMS(vote_img, 150); // 임계값을 조정하여 실험
    imshow("NMS", nms_img);
   // imwrite("NMS.png", nms_img);

    DrawLines(img, nms_img); // 이미지에 직선을 그립니다.
    imshow("Lines", img);
    //imwrite("허프변환_직선.png", img);

    waitKey(0);
    return 0;
}
