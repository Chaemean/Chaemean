#include <opencv2\opencv.hpp>
#include <iostream>
#include <cmath>

using namespace cv;
using namespace std;

// 절댓값 반환
double Absol(double x)
{
    if (x >= 0)
        return x;
    else
        return -x;
}

//칼라->명암영상 함수 (이미지)
Mat Gray(Mat img)
{
    int w = img.cols;
    int h = img.rows;

    Mat sub(h, w, CV_8UC1);

    //명암영상 변환공식을 사용하여 그레이로 변환, +0.5는 반올림을 위해 해줌
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            Vec3b pixel = img.at<Vec3b>(i, j);
            sub.at<uchar>(i, j) = (int)(0.114 * pixel[0] + 0.587 * pixel[1] + 0.299 * pixel[2] + 0.5);
        }
    }

    return sub;
}

//컨볼루션 해주는 함수 (이미지, 커널)
Mat Convolution(Mat img, Mat kernel) {
	int kernelRows = kernel.rows;
	int kernelCols = kernel.cols;

	int imageRows = img.rows;
	int imageCols = img.cols;

	int paddingX = kernelCols / 2; // 가장자리 적용 안되는 부분 계산
	int paddingY = kernelRows / 2;

	//가장자리를 적용하기위해 가장자리를 0으로 채우는 0덧대기를 해준다
	Mat sub = Mat::zeros(imageRows + 2 * paddingY, imageCols + 2 * paddingX, CV_8UC1); //0으로 초기화
	Mat convol_img(imageRows, imageCols, CV_8UC1); //반환할 이미지

	for (int i = paddingY; i < imageRows + paddingY; i++) { //sub에 원래 이미지 화솟값 채워줌, 가장자리 부분에 채우지 않도록 주의
		for (int j = paddingX; j < imageCols + paddingX; j++) {
			sub.at<uchar>(i, j) = img.at<uchar>(i - paddingY, j - paddingX);
		}
	}

	// 가장자리(필터 적용이 안되는 부분)를 제외한 부분 컨볼루션
	for (int i = paddingY; i < imageRows + paddingY; i++) {
		for (int j = paddingX; j < imageCols + paddingX; j++) {
			double sum = 0.0; // 중심화소 값 = sum

			// 커널과 픽셀값 연산해서 중심화소 값 계산
			for (int ky = 0; ky < kernelRows; ky++) {
				for (int kx = 0; kx < kernelCols; kx++) {
					double pixelValue = (double)sub.at<uchar>(i + ky - paddingY, j + kx - paddingX); //확장된 sub를 이용하여 중심화소를 기준으로 주변 값을 읽어온다.
					double kernelValue = kernel.at<double>(ky, kx); // 커널 값을 읽어온다
					sum += pixelValue * kernelValue; // 주변화소값과 커널값을 곱한 값을 모두 더해준다.
				}
			}

			convol_img.at<uchar>(i - paddingY, j - paddingX) = saturate_cast<uchar>(Absol(sum)); // 반환할 이미지에 계산된 값을 넣어준다
		}
	}

	return convol_img;
}

//소벨영상합치기
Mat CombineSobel(Mat sobelX, Mat sobelY) {
    int rows = sobelX.rows;
    int cols = sobelX.cols;

    Mat combinedSobel = Mat::zeros(rows, cols, CV_8UC1);

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            // x방향과 y방향 에지 강도를 제곱하여 더함
            double gx = sobelX.at<uchar>(i, j);
            double gy = sobelY.at<uchar>(i, j);
            double magnitude = sqrt(gx * gx + gy * gy);
            float ang = std::atan2(gy, gx); //그레이디언트 각 계산

            

            // 최종 에지 강도를 이미지에 저장
            combinedSobel.at<uchar>(i, j) = saturate_cast<uchar>(magnitude);
        }
        
    }

    return combinedSobel;
}

int main()
{
    Mat img = imread("lena.jpg");
    Mat gray_img = Gray(img);

    // 마스크
    Mat sobel_x = (Mat_<double>(3, 3) << -1, 0, 1, -2, 0, 2, -1, 0, 1);
    Mat sobel_y = (Mat_<double>(3, 3) << -1, -2, -1, 0, 0, 0, 1, 2, 1);

    Mat sobel_imgx = Convolution(gray_img, sobel_x);
    Mat sobel_imgy = Convolution(gray_img, sobel_y);

    //imshow("sobel_x", sobel_imgx);
    //imshow("sobel_y", sobel_imgy);

    Mat combine = CombineSobel(sobel_imgx, sobel_imgy);
    imshow("combine", combine);

    waitKey(0);

    return 0;
}
